version: '3'
name: oc-p7
services:
  frontend:
    build: ./Patin_Clement_1_modele_012024/frontend
    # image: ocp7containerregistry.azurecr.io/frontend
    image: clementpatin/oc-p7:frontend
    ports:
      - 8501:8501
    depends_on:
      - backend
    # volumes:
    #   - ./frontend:/app
    restart: always
    networks:
      - app
    container_name: frontend
    
  backend:
    build: ./Patin_Clement_1_modele_012024/backend
    # image: ocp7containerregistry.azurecr.io/backend
    image: clementpatin/oc-p7:backend
    ports:
      - 8000:8000
    # volumes:
    #   - ./backend:/app
    restart: always
    networks:
      - app
    container_name: backend

networks:
  app:
    driver: bridge


# local :

# docker login
# docker-compose up --build --project-name oc-p7 (pour le créer et le lancer en local)
# docker-compose up -d (tjs en local, pour le lancer seulement, l'image étant déjà créée)

# docker hub

# docker-compose push (pour l'enregistrer sur le repose Docker Hub)


# déploiement Azure Web App :

# créer un resource group
# az group create --name oc-p7 --location "West Europe"
# créer un appservice plan (en B2 car sinon ça foire)
# az appservice plan create --name appServiceP7 --resource-group oc-p7 --sku B2 --is-linux  
# créer l'app grâce au docker-compose    
# az webapp create --resource-group oc-p7 --name testAppP7 --multicontainer-config-type compose --multicontainer-config-file docker-compose.yml --plan appServiceP7


# pour le CI/CD :

# relier à docker hub
# az webapp config container set --name testAppP7 --resource-group oc-p7 --multicontainer-config-file docker-compose.yml --docker-registry-server-user clementpatin --docker-registry-server-password !!!!!MYPASSWORD!!!!!

# avoir WebHook
# az webapp deployment container config --name testAppP7 --resource-group oc-p7 --enable-cd true --query CI_CD_URL --output tsv



# tout effacer :

# az group delete --name oc-p7